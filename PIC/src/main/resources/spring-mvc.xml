<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/aop  
                        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd  
                        http://www.springframework.org/schema/cache  
                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd 
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
                        ">

	<!-- FastJson配置
	QuoteFieldNames———-输出key时是否使用双引号,默认为true 
	WriteMapNullValue——–是否输出值为null的字段,默认为false 
	WriteNullNumberAsZero—-数值字段如果为null,输出为0,而非null 
	WriteNullListAsEmpty—–List字段如果为null,输出为[],而非null 
	WriteNullStringAsEmpty—字符类型字段如果为null,输出为”“,而非null 
	WriteNullBooleanAsFalse–Boolean字段如果为null,输出为false,而非null -->
	
	<!-- 配置阿里的FastJson -->
	<bean id="mappingJacksonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			 <list>
                 <value>text/plain;charset=UTF-8</value>
                 <!-- <value>text/html;charset=UTF-8</value> -->
                 <value>application/json</value>
             </list>
		</property>
		<property name="features">
            <list>
                <value>QuoteFieldNames</value>
            </list>
        </property>
	</bean>
	
	<!-- 注解解析 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
        	<ref bean="mappingJacksonHttpMessageConverter"/>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller-->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="pha.com.common.base.controller" />
	<context:component-scan base-package="pha.com.code.**.controller" />
	<context:component-scan base-package="pha.com.annotation.**" />

	<bean id="nosh" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	
	<!-- 对静态资源文件的访问,使用默认的Servlet来响应静态文件 -->
	<mvc:resources mapping="/assets/css/**" location="/assets/css/" />
	<mvc:resources mapping="/assets/images/**" location="/assets/images/" />
	<mvc:resources mapping="/assets/js/**" location="/assets/js/" />
	<mvc:resources mapping="/admin/js/**" location="/admin/js/" />
	<mvc:resources mapping="/assets/video/**" location="/assets/video/" />
	
	<mvc:resources mapping="/assets/cloud/404/**" location="/assets/cloud/404/" />
	<!-- <mvc:resources mapping="/assets/cloud/404/css/**" location="/assets/cloud/404/css/" />
	<mvc:resources mapping="/assets/cloud/404/font/**" location="/assets/cloud/404/font/" />
	<mvc:resources mapping="/assets/cloud/404/images/**" location="/assets/cloud/404/images/" />
	<mvc:resources mapping="/assets/cloud/404/scripts/**" location="/assets/cloud/404/scripts/" /> -->
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="nosh" /> <!-- -->
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>